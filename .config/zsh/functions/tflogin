#!/usr/local/bin/zsh

function tflogin() {
  PROJECT=$argv[1]
  BW_CHECK=$(bw login --check)

  printf "\nbitwarden: checking if you are logged in...\n"
  while [[ $BW_CHECK != *"[92mYou are logged in![39m"* ]];
  do
    printf '\e[1;33m%-6s\e[m\n' "bitwarden: not logged in, let's fix that:"
    bw login
    BW_CHECK=$(bw login --check)
  done

  printf '\e[1;32m%-6s\e[m' "bitwarden: you are logged in."

  # Loop if variable is not set or if it contains a string value with space.
  while [[ -z "$BW_SESSION" || $BW_SESSION == *" "* ]];
  do
    printf "%b" "\nbitwarden: enter master password to unlock vault: \e[1;33m[input is hidden]\e[0m "
    BW_SESSION=$(bw unlock --raw | sed -n '1!p')
  done

  printf '\n\e[1;32m%-6s\e[m\n' "bitwarden: session initiated!"
  printf "bitwarden: syncing bitwarden vault...\n"
  echo $(bw sync --session $BW_SESSION)

  printf "\nbitwarden: fetching credentials..."
  ITEM_ID=$(bw list items --search $PROJECT --session $BW_SESSION --pretty | grep "id" | sed -n '1p' | awk -F'"' '{ print $4 }')
  printf "\nbitwarden: saved credentials as " && bw get attachment $PROJECT.json --output /tmp/$PROJECT.json --raw  --itemid $ITEM_ID --session $BW_SESSION

  printf "\ngcloud: setting google project...\n"
  gcloud config set project $PROJECT

  printf "\nzsh: populating shared environment variables...\n"
  TERRAFORM_STATE_GCP_BUCKET=$PROJECT-tf-state
  GOOGLE_APPLICATION_CREDENTIALS=/tmp/$PROJECT.json

  printf "zsh: populating $PROJECT specific environment variables...\n"
  bw get item $ITEM_ID --session $BW_SESSION --pretty | grep "fileName" | awk -F'"' '{ print $4 }' |
  {
  while read line
  do
    if [ $line != "$PROJECT.json" ]; then
      echo "zsh: creating environment variable for $line"
      bw-noi get attachment $line --output /tmp/$line --raw --itemid $ITEM_ID --session $BW_SESSION > /dev/null 2>&1
      echo "TF_VAR_$line=$(cat /tmp/$line)" >> /tmp/attachment_variables
    fi
  done
  }
  source /tmp/attachment_variables
  rm -f /tmp/attachment_variables

  echo ""
  read "REPLY?Do ye wish to run init? [y/N] "
  if [[ "$REPLY" =~ ^[Yy]$ ]]
  then
    terraform init -reconfigure -backend-config="bucket=$TERRAFORM_STATE_GCP_BUCKET" -lock=false
      if [[ $PROJECT == *"prod"* ]]; then
        kset $PROJECT
        ENVIRONMENT=prod
        TERRAFORM_ENVIRONMENT=prod
        GOOGLE_ENCRYPTION_KEY=$(bw get password $ITEM_ID --session $BW_SESSIONÂ | base64 --decode)
        terraform workspace select prod
      elif [[ $PROJECT == *"test"* ]]; then
        kset $PROJECT
        ENVIRONMENT=test
        TERRAFORM_ENVIRONMENT=test
        GOOGLE_ENCRYPTION_KEY=""
        terraform workspace select test
      elif [[ $PROJECT == *"shared"* ]]; then
        ENVIRONMENT=shared
        TERRAFORM_ENVIRONMENT=shared
        GOOGLE_ENCRYPTION_KEY=""
        terraform workspace select shared
        # HashiCrop Vault spesifics
        terraform init -reconfigure -upgrade -backend-config="bucket=$TERRAFORM_STATE_GCP_BUCKET"
        VAULT_ADDR="$(printf 'https://'$(terraform output address | tr -d '\r\n' ))"
        VAULT_TOKEN=$(terraform output root_token_decrypt_command | bash)
        terraform output vault-cert-self-signed-pem > /tmp/ca.cert
        VAULT_CAPATH=/tmp/ca.cert
      fi
  fi

  read "REPLY?Do ye wish to run refresh? [y/N] "
  if [[ "$REPLY" =~ ^[Yy]$ ]]
  then
    terraform refresh $(for filename in env/$ENVIRONMENT/*.tfvars; do printf "-var-file=$filename " ; done)
  fi

  printf "\nbitwarden: closing session...\n"
  unset BW_SESSION

  printf "%b" "\nTerraform environment is ready for: \e[1;32m$PROJECT\e[0m\n"

  echo ""
  echo "  (\.   \      ,/)"
  echo "   \(   |\     )/    Yer done!"
  echo "   //\  | \   /\\"
  echo "  (/ /\_#oo#_/\ \)   Happy Terraforming!"
  echo "   \/\  ####  /\/"
  echo "        '##'"
  echo ""
}
